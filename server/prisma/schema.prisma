// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String         @unique
  email         String         @unique
  isActive      Boolean        @default(true)
  avatar        String
  password      String
  birthDate     DateTime
  username      String
  createdAt     DateTime       @default(now())
  groups        Group[]
  profile       Profile?
  following     Follows[]      @relation("follower")
  followedBy    Follows[]      @relation("following")
  posts         Post[]
  notifications Notification[]
  messages      Message[]
  reacts        React[]
  bookmarks     Bookmark[]
  pages         Page[]
  Member        Member[]

  @@index([email, id, name])
  @@map("users")
}

model Profile {
  id           String        @id @default(cuid())
  cover        String?
  country      String?
  bio          String?
  gender       Gender?
  livesIn      String?
  education    String?
  worksAt      String?
  relationship Relationship?
  certificates String[]
  hobbies      String[]
  likes        Int           @default(0)
  friends      Int           @default(0)
  reputation   Int           @default(0)
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique

  @@map("profiles")
}

model Follows {
  id          String    @default(cuid())
  follower    User      @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User      @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  messages    Message[]
  createdAt   DateTime  @default(now())

  @@id([followerId, followingId])
  @@map("follows")
}

model Message {
  id                 String   @id @default(cuid())
  text               String?
  mediasUrl          String[]
  author             User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId           String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  group              Group?   @relation(fields: [groupId], references: [id])
  groupId            String?
  follows            Follows? @relation(fields: [followsFollowerId, followsFollowingId], references: [followerId, followingId])
  followsFollowerId  String?
  followsFollowingId String?

  @@index([followsFollowerId, followsFollowingId, createdAt(sort: Asc)])
  @@map("messages")
}

model Group {
  id        String    @id @default(cuid())
  name      String
  messages  Message[]
  users     User[]
  createdAt DateTime  @default(now())

  @@map("groups")
}

model Page {
  id        String   @id @default(cuid())
  posts     Post[]
  members   Member[]
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())

  @@map("pagess")
}

model Member {
  id        String   @id @default(cuid())
  member    User     @relation(fields: [userId], references: [id])
  userId    String
  page      Page     @relation(fields: [pageId], references: [id])
  pageId    String
  role      Role     @default(PUBLIC)
  createdAt DateTime @default(now())
}

model Post {
  id         String     @id @default(cuid())
  text       String?
  imagesSrc  String[]
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  privacy    Privacy    @default(PUBLIC)
  commenter  Comment[]  @relation("commenter")
  commenting Comment[]  @relation("commenting")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  reacts     React[]
  comments   Int        @default(0)
  likes      Int        @default(0)
  shares     Int        @default(0)
  bookmarks  Bookmark[]
  page       Page?      @relation(fields: [groupId], references: [id])
  groupId    String?

  @@map("posts")
}

model React {
  id     String    @id @default(cuid())
  type   ReactType
  user   User      @relation(fields: [userId], references: [id])
  userId String
  post   Post?     @relation(fields: [postId], references: [id])
  postId String?

  @@map("reacts")
}

model Bookmark {
  id     String    @id @default(cuid())
  type   ReactType
  user   User?     @relation(fields: [userId], references: [id])
  userId String?
  post   Post?     @relation(fields: [postId], references: [id])
  postId String?

  @@map("bookmarks")
}

model Comment {
  commenter    Post   @relation("commenter", fields: [commenterId], references: [id])
  commenterId  String
  commenting   Post   @relation("commenting", fields: [commentingId], references: [id])
  commentingId String

  @@id([commenterId, commentingId])
  @@map("comments")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  mediaUrl  String?
  isRead    Boolean          @default(false)
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime         @default(now())

  @@map("notifications")
}

enum Privacy {
  PRIVATE
  FRIENDS
  PUBLIC
}

enum NotificationType {
  MESSAGE
  COMMENT
  FRIEND_REQUEST
  MENTION
  REACT
}

enum RoomType {
  PRIVATE
  GROUP
}

enum Role {
  PRIVATE
  PUBLIC
}

enum ReactType {
  LIKE
  LOVE
  INSPIRE
  IMPRESS
  HAHA
  LIE
}

enum Gender {
  MALE
  FEMALE
}

enum Relationship {
  MARRIED
  SINGLE
}
